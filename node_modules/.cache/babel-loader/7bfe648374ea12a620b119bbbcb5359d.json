{"remainingRequest":"D:\\github\\JYmo\\node_modules\\thread-loader\\dist\\cjs.js!D:\\github\\JYmo\\node_modules\\babel-loader\\lib\\index.js!D:\\github\\JYmo\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\github\\JYmo\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\github\\JYmo\\src\\views\\secondaryHome\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\github\\JYmo\\src\\views\\secondaryHome\\index.vue","mtime":1591867168068},{"path":"D:\\github\\JYmo\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1591696415167},{"path":"D:\\github\\JYmo\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1591696425823},{"path":"D:\\github\\JYmo\\node_modules\\babel-loader\\lib\\index.js","mtime":1591696413770},{"path":"D:\\github\\JYmo\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1591696415167},{"path":"D:\\github\\JYmo\\node_modules\\vue-loader\\lib\\index.js","mtime":1591696427902}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}